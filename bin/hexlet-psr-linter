#!/usr/bin/env php
<?php

//require_once __DIR__ . '/../vendor/autoload.php';
require_once 'vendor/autoload.php';

use Colors\Color;

use function \HexletPsrLinter\lint;
use function \HexletPsrLinter\fix;
use function \HexletPsrLinter\buildReport;
use function \HexletPsrLinter\Utils\formatErrorMessage;
use function \HexletPsrLinter\Utils\getFilesByPath;
use function \HexletPsrLinter\Utils\loadRules;

//echo getcwd() . PHP_EOL;
try {
    $exitCode = 0;

    $cmd = new \Commando\Command();
    $cmd->doNotTrapErrors();
    $cmd->argument()->title('<path>')->describedAs('A file or folder to lint.')->require();
    $cmd->flag('f')->aka('fix')->describedAs('Fix errors if it is possible.')->boolean();
    $cmd->flag('r')->aka('rules')->describedAs('A file or folder with your lint rules. See rulesSample.json.');
    $cmd->option('m')->aka('format')->describedAs('When set, use this format for report. Values: text, json, yml.')
        ->must(function ($format) {
            $formats = array('text', 'json', 'yml');
            return in_array($format, $formats);
        });

    $args = $cmd->getArgumentValues();
    $path = $args[0];
    $flags = $cmd->getFlagValues();
    $autoFix = $flags['f'];
    $format = $flags['m'];
    $rulesPath = $flags['r'];

    $files = getFilesByPath($path);
    $rules = array_merge(\HexletPsrLinter\BASE_RULES, loadRules($rulesPath));
    foreach ($files as $file) {
        echo (new Color(realpath($file)))->white->underline . PHP_EOL;
        $fileContent = file_get_contents($file);
        $result = lint($fileContent, $rules);
        $errors = $result['errors'];

        if ($autoFix && isset($result['allStatements'])) {
            $fixedCode = fix($errors, $result['allStatements']);
            file_put_contents($file, $fixedCode);
        }

        $report = buildReport($errors, $format);
        echo $report . PHP_EOL;

        if (count($errors) > 0) {
            $exitCode = 1;
        }
    }

    exit($exitCode);
} catch (Throwable $e) {
    echo get_class($e) . PHP_EOL;
    $message = $e->getMessage();
    if (strpos($message, 'Required argument') !== false
        || strpos($message, 'Unknown option') !== false
        || strpos($message, 'for option r') !== false) {
        $cmd->printHelp();
    }
    echo formatErrorMessage($message);
    return 1;
}
